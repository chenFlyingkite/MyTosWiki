apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

// Fabric -- Start
// https://fabric.io/kits/android/crashlytics/install
apply plugin: 'io.fabric'
buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        // For Crashlytics
        classpath 'io.fabric.tools:gradle:1.25.4'
    }
}
repositories {
    maven { url 'https://maven.fabric.io/public' }
}
// Fabric -- End

def googlePlayVersion = "9.8.0"
boolean createPlayApk = true

task MyBuildInfo {
    ext.versionCode = 50
    ext.versionName = "1.0.0.49"
    if (!createPlayApk) {
        ext.versionName = "Me"
    }
    ext.APK_NAME = "MyTosWiki-${versionName}-${versionCode}.apk"
    ext.MAPPING = "MyTosWiki-${versionName}-${versionCode}-mapping.txt"
}

android {
    signingConfigs {
        config {
            keyAlias 'MyAndroidKey'
            keyPassword 'MyAndroid'
            storeFile file('../../KeyStores/chenflyingkite.jks')
            storePassword 'MyAndroid'
        }
    }

    // https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.DexOptions.html
    dexOptions {
        jumboMode false
        javaMaxHeapSize "1g"
        maxProcessCount 4 // Total Memory = maxProcessCount * javaMaxHeapSize
        threadCount (maxProcessCount * 3)
    }

    // See this for options
    // http://tools.android.com/tips/lint-checks
    lintOptions {
        warning 'MissingTranslation'
        ignore  'ContentDescription', 'SpUsage'
        ignore  'RtlCompat', 'RtlEnabled', 'RtlHardcoded', 'RtlSymmetry'
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    flavorDimensions "default"

    defaultConfig {
        applicationId "com.flyingkite.mytoswiki"
        minSdkVersion 16
        targetSdkVersion 28
        multiDexEnabled true
        versionCode MyBuildInfo.versionCode
        versionName MyBuildInfo.versionName

        // https://stackoverflow.com/questions/44322178/room-schema-export-directory-is-not-provided-to-the-annotation-processor-so-we
        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.config
            applicationIdSuffix ".debug"

            // --- Crashlytics --- start
            manifestPlaceholders.crashlyticsEnabled = false
            // https://developer.android.com/studio/build/optimize-your-build.html#disable_crashlytics
            // https://stackoverflow.com/a/49528129
            ext.enableCrashlytics = false
            // https://docs.fabric.io/android/crashlytics/build-tools.html
            // Only use this flag on builds you don't proguard or upload to beta-by-crashlytics
            ext.alwaysUpdateBuildId = false
            // --- Crashlytics --- end
        }
        release {
            signingConfig signingConfigs.config
            minifyEnabled true
            zipAlignEnabled true
            //jniDebuggable false
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // --- Crashlytics --- start
            manifestPlaceholders.crashlyticsEnabled = true
            ext.enableCrashlytics = true
            // --- Crashlytics --- end
        }
    }

    project.gradle.addListener(new TaskTicTac())
}

// Implementation Vs Api in Android Gradle plugin 3.0
// https://medium.com/mindorks/implementation-vs-api-in-gradle-3-0-494c817a6fa
// https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration#variant_aware
dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    api "androidx.multidex:multidex:2.0.1"
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    api "androidx.appcompat:appcompat:1.0.2"
    api "com.google.android.material:material:1.0.0"
    api "androidx.percentlayout:percentlayout:1.0.0"
    api "androidx.recyclerview:recyclerview:1.0.0"
    api 'androidx.constraintlayout:constraintlayout:1.1.3'

    // Firebase
    // https://firebase.google.com/docs/android/setup
    // https://console.firebase.google.com/project/mytoswiki/overview
    api 'com.google.firebase:firebase-core:16.0.0'
    api 'com.google.firebase:firebase-config:16.0.0'
    api 'com.google.firebase:firebase-messaging:17.0.0'

    // Flurry Analytics
    // https://developer.yahoo.com/flurry/docs/integrateflurry/android/

    // Fabric Crashlytics
    api 'com.crashlytics.sdk.android:crashlytics:2.9.3'

    //api 'com.github.User:Repo:Tag'
    api "com.github.chenFlyingkite:MyAndroid:a841193247"
    //api "com.github.chenFlyingkite:MyAndroid:1f5c017f30"

    // A Java serialization/deserialization library to convert Java Objects into JSON and back

    //https://github.com/google/gson
    api 'com.google.code.gson:gson:2.8.5'

    // jsoup HTML parser library @ https://jsoup.org/
    api 'org.jsoup:jsoup:1.11.3'

    // Room Persistence Library
    // https://developer.android.com/training/data-storage/room/
//    def roomVersion = "1.1.1"
//    api "android.arch.persistence.room:runtime:$roomVersion"
//    kapt "android.arch.persistence.room:compiler:$roomVersion"

    // ViewModel for data passing through fragment & activity, Not using v4 fragment...
    //api "android.arch.lifecycle:viewmodel:1.1.1"
    //api "android.arch.lifecycle:extensions:1.1.1"


    // Glide for Image cache library.
    // https://github.com/bumptech/glide
    //api "com.github.bumptech.glide:glide:3.8.0" // fails for 4.4
    api "com.github.bumptech.glide:glide:4.9.0"
    kapt 'com.github.bumptech.glide:compiler:4.9.0'
    //annotationProcessor 'com.github.bumptech.glide:compiler:4.7.1'

    // MathView is a third-party view library, which might help you display math formula on Android apps easier.
    // https://github.com/kexanie/MathView
    //api 'io.github.kexanie.library:MathView:0.0.6'

    // Drawing the Charts like Excel in Android
    api 'com.github.PhilJay:MPAndroidChart:v3.0.3'

    // OkHttp for web
    // http://square.github.io/okhttp/
    //api "com.squareup.okhttp3:okhttp:3.9.1"

    // jsoup HTML parser library @ https://jsoup.org/
    // https://github.com/jhy/jsoup
    //api "org.jsoup:jsoup:1.11.2"
    //
    // https://github.com/Wikia/vignette#scale-to-width
    // Picasso
    //api 'com.squareup.picasso:picasso:2.5.2'
    //api 'com.squareup.picasso:picasso:2.71828'
}

// Firebase : Add to the bottom of the file
apply plugin: 'com.google.gms.google-services'

android.applicationVariants.all { variant ->
    def buildType = variant.buildType.name
    variant.assemble.doFirst {
        println "[applicationVariants.all] ${variant.name}"
    }

    if (buildType == "release") {
        variant.assemble.doLast {
            variant.outputs.all { output ->
                println "[assemble.doLast] copy" +
                    "\n    from(${output.outputFile})" +
                    "\n    into(${rootDir}/apks-${buildType})" +
                    "\n    rename(${MyBuildInfo.APK_NAME})"
                copy {
                    from output.outputFile
                    into "${rootDir}/apks-${buildType}"
                    rename '(.*)', MyBuildInfo.APK_NAME
                }
            }
            if (variant.getBuildType().isMinifyEnabled()) {
                println "[assemble.doLast] copy" +
                    "\n    from(${variant.mappingFile})" +
                    "\n    into(${rootDir}/apks-${buildType})" +
                    "\n    rename(${MyBuildInfo.MAPPING})"
                copy {
                    from variant.mappingFile
                    into "${rootDir}/apks-${buildType}"
                    rename '(.*)', MyBuildInfo.MAPPING
                }
            }
        }
    }
}


// BuildAdapter is simple listener for BuildListener
// TaskExecutionAdapter is simple listener for TaskExecutionListener
class TaskTicTac extends BuildAdapter implements TaskExecutionListener {
    private TicTac clock = new TicTac()
    private times = []
    private everSlow = false
    private final SLOW = 3000

    @Override
    void beforeExecute(Task task) {
        clock.tic()
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        long ms = clock.tacL()
        if (!everSlow) {
            everSlow = ms >= SLOW
        }
        times.add([ms, task.path])
    }

    @Override
    void buildFinished(BuildResult result) {
        if (!everSlow) return

        printf "---- TaskTicTac ---- (All %s tasks)\n", times.size()
        printf "Tasks spend time >= %s ms:\n", SLOW
        for (time in times) {
            if (time[0] >= SLOW) {
                printf "%10.03f s  %s\n", time[0] * 0.001, time[1]
            }
        }
        println "--------"
    }
}

class TicTac {
    private Stack<Long> tictac = new Stack<>()

    void reset() {
        tictac.clear()
    }

    long tic() {
        long tic = System.currentTimeMillis()
        tictac.push(tic)
        return tic
    }

    long tacL() {
        long tac = System.currentTimeMillis()
        if (tictac.size() < 1) {
            logError(tac, "")
            return -1
        } else {
            long tic = tictac.pop()
            return tac - tic
        }
    }

    void tac() {
        long tac = System.currentTimeMillis()

        if (tictac.size() < 1) {
            logError(tac, msg)
        } else {
            long tic = tictac.pop()
            StringBuilder s = new StringBuilder()
            int n = tictac.size()

            for (int i = 0; i < n; ++i) {
                s.append(" ")
            }

            s.append("[").append(tac - tic).append("] : ").append(msg)
            logTac(s.toString())
        }
    }

    void logTac(String s) {
        printf "Hi, $s\n"
    }

    void logError(long tac, String msg) {
        printf "Hi, X_X [tic = N/A, tac = $tac] : $msg\n"
    }
}
